{{- $root := . -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "streams-app.fullname" . }}
  {{- include "streams-app.annotations" . }}
  labels:
    {{- include "streams-app.labels" . | nindent 4 }}
    {{- range $key, $value := .Values.labels }}
    {{ $key | quote }}: {{ $value | quote }}
    {{- end }}
spec:
  ttlSecondsAfterFinished: 30
  template:
    metadata:
    {{- if .Values.podAnnotations }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key | quote }}: {{ $value | quote }}
      {{- end }}
    {{- end }}
      labels:
        {{- include "streams-app.selectorLabels" . | nindent 8 }}
        {{- range $key, $value := .Values.podLabels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      restartPolicy: {{ .Values.restartPolicy }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- tpl (toYaml .) $root | nindent 8 }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: "kafka-app"
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          resources:
{{ toYaml .Values.resources | indent 12 }}
          args:
          {{- if not .Values.statefulSet }}
            - --volatile-group-instance-id
          {{- end }}
          {{- if hasKey .Values.kafka "bootstrapServers" }}
            - --bootstrap-servers
            - {{ .Values.kafka.bootstrapServers | quote }}
          {{- end }}
          {{- if hasKey .Values.kafka "schemaRegistryUrl" }}
            - --schema-registry-url
            - {{ .Values.kafka.schemaRegistryUrl | quote }}
          {{- end }}
          {{- range .Values.kafka.inputTopics }}
            - --input-topics
            - {{ . | quote  }}
          {{- end }}
          {{- if hasKey .Values.kafka "inputPattern" }}
            - --input-pattern
            - {{ .Values.kafka.inputPattern | quote }}
          {{- end }}
          {{- if hasKey .Values.kafka "outputTopic" }}
            - --output-topic
            - {{ .Values.kafka.outputTopic | quote }}
          {{- end }}
          {{- if hasKey .Values.kafka "errorTopic" }}
            - --error-topic
            - {{ .Values.kafka.errorTopic | quote }}
          {{- end }}
          {{- range $key, $value := .Values.kafka.labeledOutputTopics }}
            - --labeled-output-topics
            - {{ $key }}={{ $value }}
          {{- end }}
          {{- range $key, $value := .Values.kafka.labeledInputTopics }}
            - --labeled-input-topics
            - {{ $key }}={{ $value | join ";" }}
          {{- end }}
          {{- range $key, $value := .Values.kafka.labeledInputPatterns }}
            - --labeled-input-patterns
            - {{ $key }}={{ $value }}
          {{- end }}
          {{- if hasKey .Values.kafka "applicationId" }}
            - --application-id
            - {{ .Values.kafka.applicationId | quote }}
          {{- end }}
          {{- range $key, $value := .Values.commandLine }}
            - {{ $key | quote  }}
            - {{ $value | quote }}
          {{- end }}
          {{- range .Values.commandLineList }}
            - {{ . | quote  }}
          {{- end }}
          {{- if .Values.kafka.deleteOutput }}
            - clean
          {{- else }}
            - reset
          {{- end }}
          env:
            - name: ENV_PREFIX
              value: {{ .Values.configurationEnvPrefix }}_
            {{- range $key, $value := .Values.kafka.config }}
            - name: {{ printf "KAFKA_%s" $key | replace "." "_" | upper | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := .Values.secrets }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: {{ include "streams-app.fullname" . }}
                  key: "{{ $key }}"
            {{- end }}
            {{- range $key, $value := .Values.secretRefs }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: "{{ $value.key }}"
            {{- end }}
            {{- range $key, $value := .Values.env }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
            - name: JAVA_TOOL_OPTIONS
              value: '-XX:MaxRAMPercentage={{ printf "%.1f" .Values.javaOptions.maxRAMPercentage }}
                {{ .Values.javaOptions.others | join " " }}'
          {{- if or (.Values.files) (.Values.secretFilesRefs) }}
          volumeMounts:
            {{- range $key, $value := .Values.files }}
            - name: config
              mountPath: {{ printf "%s/%s" $value.mountPath $key | quote }}
              subPath: {{ $key | quote }}
            {{- end }}
            {{- range .Values.secretFilesRefs }}
            - name: {{ .volume }}
              mountPath: {{ .mountPath }}
              {{- if .readOnly }}
              readOnly: true
              {{- end }}
              {{- if .subPath}}
              subPath: {{.subPath }}
              {{- end }}
            {{- end }}
        {{- end }}
      {{- if or (.Values.files) (.Values.secretFilesRefs) }}
      volumes:
        {{- if .Values.files }}
        - name: config
          configMap:
            name: {{ include "streams-app.fullname" . }}
        {{- end }}
        {{- range .Values.secretFilesRefs }}
        - name: {{ .volume }}
          secret:
            secretName: {{ .name }}
        {{- end }}
      {{- end }}
  backoffLimit: {{ .Values.backoffLimit }}
