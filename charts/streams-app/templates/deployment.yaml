{{- $root := . -}}
{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta1
{{- end }}
{{- if .Values.statefulSet }}
kind: StatefulSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: {{ template "streams-app.fullname" . }}
{{- if or .Values.autoscaling.consumerGroup .Values.annotations }}
  annotations:
  {{- range $key, $value := .Values.annotations }}
    {{ $key | quote }}: {{ $value | quote }}
  {{- end }}
  {{- if and .Values.autoscaling.consumerGroup (not .Values.annotations.consumerGroup) }}
    consumerGroup: {{ .Values.autoscaling.consumerGroup | quote }}
  {{- end }}
{{- end }}
  labels:
    app: {{ template "streams-app.name" . }}
    chart: {{ template "streams-app.chart" . }}
    release: {{ .Release.Name }}
    {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ $value }}
    {{- end }}
spec:
  {{- if .Values.statefulSet }}
  serviceName: {{ template "streams-app.name" . }}
  podManagementPolicy: Parallel
  {{- end }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "streams-app.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
    {{- if or (or (or .Values.awsRole .Values.prometheus.jmx.enabled) .Values.autoscaling.consumerGroup) .Values.annotations }}
      annotations:
      {{- if .Values.awsRole }}
        iam.amazonaws.com/role: {{ .Values.awsRole }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.jmx.port | quote }}
      {{- end }}
      {{- range $key, $value := .Values.annotations }}
        {{ $key | quote }}: {{ $value | quote }}
      {{- end }}
      {{- if and .Values.autoscaling.consumerGroup (not .Values.annotations.consumerGroup) }}
        consumerGroup: {{ .Values.autoscaling.consumerGroup | quote }}
      {{- end }}
    {{- end }}
      labels:
        app: {{ template "streams-app.name" . }}
        release: {{ .Release.Name }}
        {{- range $key, $value := .Values.labels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      affinity:
        {{- if .Values.nodeAffinity }}
        nodeAffinity:
{{ toYaml .Values.nodeAffinity | indent 10 }}
        {{- end }}
        podAntiAffinity:
        {{- if .Values.requirePodAntiAffinity }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - {{ template "streams-app.name" . }}
            topologyKey: "kubernetes.io/hostname"
        {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - {{ template "streams-app.name" . }}
        {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ template "streams-app.name" . }}
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          resources:
{{ toYaml .Values.resources | indent 12 }}
          env:
            - name: ENV_PREFIX
              value: {{ .Values.configurationEnvPrefix }}_
          {{- range $key, $value := .Values.streams.config }}
            - name: {{ printf "STREAMS_%s" $key | replace "." "_" | upper | quote }}
              value: {{ $value | quote }}
          {{- end }}
          {{- if .Values.streams.staticMembership }}
            - name: STREAMS_GROUP_INSTANCE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- end }}
          {{- if .Values.prometheus.jmx.enabled }}
            - name: KAFKA_JMX_PORT
              value: "{{ .Values.jmx.port }}"
          {{- end }}
          {{- if and (.Values.streams.optimizeLeaveGroupBehavior) (not .Values.statefulSet) }}
            - name: "{{ .Values.configurationEnvPrefix }}_VOLATILE_GROUP_INSTANCE_ID"
              value: "true"
          {{- end }}
          {{- if hasKey .Values.streams "brokers" }}
            - name: "{{ .Values.configurationEnvPrefix }}_BROKERS"
              value: {{ .Values.streams.brokers | quote }}
          {{- end }}
          {{- if hasKey .Values.streams "schemaRegistryUrl" }}
            - name: "{{ .Values.configurationEnvPrefix }}_SCHEMA_REGISTRY_URL"
              value: {{ .Values.streams.schemaRegistryUrl | quote }}
          {{- end }}
          {{- if hasKey .Values.streams "productive" }}
            - name: "{{ .Values.configurationEnvPrefix }}_PRODUCTIVE"
              value: {{ .Values.streams.productive | quote }}
          {{- end }}
          {{- if hasKey .Values "debug" }}
            - name: "{{ .Values.configurationEnvPrefix }}_DEBUG"
              value: {{ .Values.debug | quote }}
          {{- end }}
          {{- if and (hasKey .Values.streams "inputTopics") (.Values.streams.inputTopics) }}
            - name: "{{ .Values.configurationEnvPrefix }}_INPUT_TOPICS"
              value: {{ .Values.streams.inputTopics | join "," | quote }}
          {{- end }}
          {{- if hasKey .Values.streams "inputPattern" }}
            - name: "{{ .Values.configurationEnvPrefix }}_INPUT_PATTERN"
              value: {{ .Values.streams.inputPattern | quote }}
          {{- end }}
          {{- if hasKey .Values.streams "outputTopic" }}
            - name: "{{ .Values.configurationEnvPrefix }}_OUTPUT_TOPIC"
              value: {{ .Values.streams.outputTopic | quote }}
          {{- end }}
          {{- if hasKey .Values.streams "errorTopic" }}
            - name: "{{ .Values.configurationEnvPrefix }}_ERROR_TOPIC"
              value: {{ .Values.streams.errorTopic | quote }}
          {{- end }}
          {{- if and (hasKey .Values.streams "extraOutputTopics") (.Values.streams.extraOutputTopics) }}
            - name: "{{ .Values.configurationEnvPrefix }}_EXTRA_OUTPUT_TOPICS"
              value: "{{- range $key, $value := .Values.streams.extraOutputTopics }}{{ $key }}={{ $value }},{{- end }}"
          {{- end }}
          {{- $delimiter := ";" }}
          {{- if and (hasKey .Values.streams "extraInputTopics") (.Values.streams.extraInputTopics) }}
            - name: "{{ .Values.configurationEnvPrefix }}_EXTRA_INPUT_TOPICS"
              value: "{{- range $key, $value := .Values.streams.extraInputTopics }}{{ $key }}={{ $value | join $delimiter }},{{- end }}"
          {{- end }}
          {{- if and (hasKey .Values.streams "extraInputPatterns") (.Values.streams.extraInputPatterns) }}
            - name: "{{ .Values.configurationEnvPrefix }}_EXTRA_INPUT_PATTERNS"
              value: "{{- range $key, $value := .Values.streams.extraInputPatterns }}{{ $key }}={{ $value }},{{- end }}"
          {{- end }}
          {{- range $key, $value := .Values.secrets }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: {{ template "streams-app.fullname" $ }}
                  key: "{{ $key }}"
          {{- end }}
          {{- range $key, $value := .Values.secretRefs }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: "{{ $value.key }}"
          {{- end }}
          {{- range $key, $value := .Values.commandLine }}
            - name: "{{ $root.Values.configurationEnvPrefix }}_{{ $key }}"
              value: {{ $value | quote }}
          {{- end }}
          {{- range $key, $value := .Values.env }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
          {{- end }}
            - name: JAVA_TOOL_OPTIONS
              value: '-Dcom.sun.management.jmxremote.port={{ .Values.jmx.port }}
                -Dcom.sun.management.jmxremote.authenticate=false
                -Dcom.sun.management.jmxremote.ssl=false
                -XX:MaxRAMPercentage={{ printf "%.1f" .Values.javaOptions.maxRAMPercentage }}
                {{ .Values.javaOptions.others | join " " }}'
        {{- if or (.Values.log4jConfig) (and .Values.persistence.enabled .Values.statefulSet) }}
          volumeMounts:
            {{- if .Values.log4jConfig }}
            - name: {{ template "streams-app.name" . }}-log4j-config-volume
              mountPath: app/resources/log4j2.xml
              subPath: log4j2.xml
            {{- end }}
            {{- if and .Values.persistence.enabled .Values.statefulSet }}
            - name: datadir
              mountPath: /tmp/kafka-streams
            {{- end }}
        {{- end }}
        {{- if or (.Values.prometheus.jmx.enabled) (.Values.ports) }}
          ports:
            {{- range .Values.ports }}
            - containerPort: {{ .containerPort }}
              name: {{ .name | quote }}
              {{- if .protocol }}
              protocol: {{ .protocol | quote }}
              {{- end }}
            {{- end }}
            {{- if .Values.prometheus.jmx.enabled }}
            - containerPort: {{ .Values.jmx.port }}
              name: jmx
            {{- end }}
        {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
          {{- .Values.livenessProbe | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
          {{- .Values.readinessProbe | toYaml | nindent 12 }}
          {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
          command:
            - java
            - -XX:+UnlockExperimentalVMOptions
            - -XX:+UseCGroupMemoryLimitForHeap
            - -XX:MaxRAMFraction=1
            - -XshowSettings:vm
            - -jar
            - jmx_prometheus_httpserver.jar
            - {{ .Values.prometheus.jmx.port | quote }}
            - /etc/jmx-streams-app/jmx-kafka-streams-app-prometheus.yml
          ports:
            - containerPort: {{ .Values.prometheus.jmx.port }}
          resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 12 }}
          volumeMounts:
            - name: jmx-config
              mountPath: /etc/jmx-streams-app
      {{- end }}
      {{- if or (.Values.prometheus.jmx.enabled) (.Values.log4jConfig) }}
      volumes:
        {{- if .Values.prometheus.jmx.enabled }}
        - name: jmx-config
          configMap:
            name: {{ template "streams-app.name" . }}-jmx-configmap
        {{- end }}
        {{ if .Values.log4jConfig }}
        - name: {{ template "streams-app.name" . }}-log4j-config-volume
          configMap:
            name: {{ template "streams-app.name" . }}-log4j-configmap
            items:
              - key: log4j2.xml
                path: log4j2.xml
        {{- end }}
      {{- end }}
  {{- if and .Values.persistence.enabled .Values.statefulSet }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: "{{ .Values.persistence.size }}"
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{- end }}
        {{- end }}
  {{- end }}
