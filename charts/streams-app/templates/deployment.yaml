{{- $root := . -}}
{{- if and .Values.persistence.enabled (not .Values.persistence.size) }}
{{- fail "When persistence is enabled, you must set .Values.persistence.size" }}
{{- end }}

{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta1
{{- end }}
{{- if .Values.statefulSet }}
kind: StatefulSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: {{ include "streams-app.fullname" . }}
  {{- include "streams-app.deployment-annotations" . }}
  labels:
    {{- include "streams-app.labels" . | nindent 4 }}
    streams-bootstrap/kind: {{ .Chart.Name }}
    {{- range $key, $value := .Values.labels }}
    {{ $key | quote }}: {{ $value | quote }}
    {{- end }}
spec:
  {{- if .Values.statefulSet }}
  serviceName: {{ include "streams-app.fullname" . }}
  podManagementPolicy: Parallel
  {{- end }}
  {{- if (not .Values.autoscaling.enabled) }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "streams-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- if or .Values.podAnnotations .Values.files }}
      annotations:
      {{- if .Values.files }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- end }}
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key | quote }}: {{ $value | quote }}
      {{- end }}
    {{- end }}
      labels:
        {{- include "streams-app.labels" . | nindent 8 }}
        streams-bootstrap/kind: {{ .Chart.Name }}
        {{- range $key, $value := .Values.podLabels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- tpl (toYaml .) $root | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: "kafka-app"
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          resources:
{{ toYaml .Values.resources | indent 12 }}
          env:
            - name: ENV_PREFIX
              value: {{ .Values.configurationEnvPrefix }}_
          {{- range $key, $value := .Values.kafka.config }}
            - name: {{ printf "KAFKA_%s" $key | replace "." "_" | upper | quote }}
              value: {{ $value | quote }}
          {{- end }}
          {{- range .Values.ports }}
            {{- if .servicePort }} # TODO verify that there is at most one service port. Currently, if there are multiple service ports, the first one will be used
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KAFKA_APPLICATION_SERVER
              value: "$(POD_IP):{{ .containerPort }}"
            {{- end }}
          {{- end }}
          {{- if .Values.kafka.staticMembership }}
            - name: KAFKA_GROUP_INSTANCE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- end }}
          {{- if not .Values.statefulSet }}
            - name: "{{ .Values.configurationEnvPrefix }}_VOLATILE_GROUP_INSTANCE_ID"
              value: "true"
          {{- end }}
          {{- if hasKey .Values.kafka "bootstrapServers" }}
            - name: "{{ .Values.configurationEnvPrefix }}_BOOTSTRAP_SERVERS"
              value: {{ .Values.kafka.bootstrapServers | quote }}
          {{- end }}
          {{- if hasKey .Values.kafka "schemaRegistryUrl" }}
            - name: "{{ .Values.configurationEnvPrefix }}_SCHEMA_REGISTRY_URL"
              value: {{ .Values.kafka.schemaRegistryUrl | quote }}
          {{- end }}
          {{- if and (hasKey .Values.kafka "inputTopics") (.Values.kafka.inputTopics) }}
            - name: "{{ .Values.configurationEnvPrefix }}_INPUT_TOPICS"
              value: {{ .Values.kafka.inputTopics | join "," | quote }}
          {{- end }}
          {{- if hasKey .Values.kafka "inputPattern" }}
            - name: "{{ .Values.configurationEnvPrefix }}_INPUT_PATTERN"
              value: {{ .Values.kafka.inputPattern | quote }}
          {{- end }}
          {{- if hasKey .Values.kafka "outputTopic" }}
            - name: "{{ .Values.configurationEnvPrefix }}_OUTPUT_TOPIC"
              value: {{ .Values.kafka.outputTopic | quote }}
          {{- end }}
          {{- if hasKey .Values.kafka "errorTopic" }}
            - name: "{{ .Values.configurationEnvPrefix }}_ERROR_TOPIC"
              value: {{ .Values.kafka.errorTopic | quote }}
          {{- end }}
          {{- if and (hasKey .Values.kafka "labeledOutputTopics") (.Values.kafka.labeledOutputTopics) }}
            - name: "{{ .Values.configurationEnvPrefix }}_LABELED_OUTPUT_TOPICS"
              value: "{{- range $key, $value := .Values.kafka.labeledOutputTopics }}{{ $key }}={{ $value }},{{- end }}"
          {{- end }}
          {{- $delimiter := ";" }}
          {{- if and (hasKey .Values.kafka "labeledInputTopics") (.Values.kafka.labeledInputTopics) }}
            - name: "{{ .Values.configurationEnvPrefix }}_LABELED_INPUT_TOPICS"
              value: "{{- range $key, $value := .Values.kafka.labeledInputTopics }}{{ $key }}={{ $value | join $delimiter }},{{- end }}"
          {{- end }}
          {{- if and (hasKey .Values.kafka "labeledInputPatterns") (.Values.kafka.labeledInputPatterns) }}
            - name: "{{ .Values.configurationEnvPrefix }}_LABELED_INPUT_PATTERNS"
              value: "{{- range $key, $value := .Values.kafka.labeledInputPatterns }}{{ $key }}={{ $value }},{{- end }}"
          {{- end }}
          {{- if hasKey .Values.kafka "applicationId" }}
            - name: "{{ .Values.configurationEnvPrefix }}_APPLICATION_ID"
              value: {{ .Values.kafka.applicationId | quote }}
          {{- end }}
          {{- range $key, $value := .Values.secrets }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: {{ include "streams-app.fullname" . }}
                  key: "{{ $key }}"
          {{- end }}
          {{- range $key, $value := .Values.secretRefs }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: "{{ $value.key }}"
          {{- end }}
          {{- range $key, $value := .Values.commandLine }}
            - name: "{{ $root.Values.configurationEnvPrefix }}_{{ $key }}"
              value: {{ $value | quote }}
          {{- end }}
          {{- range $key, $value := .Values.env }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
          {{- end }}
            - name: JAVA_TOOL_OPTIONS
              value: '-Dcom.sun.management.jmxremote.port={{ .Values.jmx.port }}
                -Dcom.sun.management.jmxremote.authenticate=false
                -Dcom.sun.management.jmxremote.ssl=false
                {{- if .Values.jmx.enabled }}
                -Djava.rmi.server.hostname={{ .Values.jmx.host }}
                -Dcom.sun.management.jmxremote.rmi.port={{ .Values.jmx.port }}
                {{- end }}
                -XX:MaxRAMPercentage={{ printf "%.1f" .Values.javaOptions.maxRAMPercentage }}
                {{ .Values.javaOptions.others | join " " }}'
        {{- if or (.Values.files) (and .Values.persistence.enabled .Values.statefulSet) (.Values.secretFilesRefs) }}
          volumeMounts:
            {{- range $key, $value := .Values.files }}
            - name: config
              mountPath: {{ printf "%s/%s" $value.mountPath $key | quote }}
              subPath: {{ $key | quote }}
            {{- end }}
            {{- range .Values.secretFilesRefs }}
            - name: {{ .volume }}
              mountPath: {{ .mountPath }}
              {{- if .readOnly }}
              readOnly: true
              {{- end }}
              {{- if .subPath}}
              subPath: {{.subPath }}
              {{- end }}
            {{- end }}
            {{- if and .Values.persistence.enabled .Values.statefulSet }}
            - name: datadir
              mountPath: /tmp/kafka-streams
            {{- end }}
        {{- end }}
        {{- if or (.Values.jmx.enabled) (.Values.ports) }}
          ports:
            {{- range .Values.ports }}
            - containerPort: {{ .containerPort }}
              name: {{ .name | quote }}
              {{- if .protocol }}
              protocol: {{ .protocol | quote }}
              {{- end }}
            {{- end }}
            {{- if .Values.jmx.enabled }}
            - containerPort: {{ .Values.jmx.port }}
              name: jmx
            {{- end }}
        {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
          {{- .Values.livenessProbe | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
          {{- .Values.readinessProbe | toYaml | nindent 12 }}
          {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
          imagePullPolicy: "{{ .Values.prometheus.jmx.imagePullPolicy }}"
          args:
            - {{ .Values.prometheus.jmx.port | quote }}
            - /etc/jmx-streams-app/jmx-kafka-streams-app-prometheus.yml
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:MaxRAMPercentage=90.0"
          ports:
            - containerPort: {{ .Values.prometheus.jmx.port }}
              name: prometheus
          resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 12 }}
          volumeMounts:
            - name: jmx-config
              mountPath: /etc/jmx-streams-app
      {{- end }}
      {{- if or (.Values.prometheus.jmx.enabled) (.Values.files) (.Values.secretFilesRefs) }}
      volumes:
        {{- if .Values.prometheus.jmx.enabled }}
        - name: jmx-config
          configMap:
            name: {{ include "streams-app.fullname" . }}-jmx-configmap
        {{- end }}
        {{- if .Values.files }}
        - name: config
          configMap:
            name: {{ include "streams-app.fullname" . }}
        {{- end }}
        {{- range .Values.secretFilesRefs }}
        - name: {{ .volume }}
          secret:
            secretName: {{ .name }}
        {{- end }}
      {{- end }}
  {{- if and .Values.persistence.enabled .Values.statefulSet }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: "{{ .Values.persistence.size }}"
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{- end }}
        {{- end }}
  {{- end }}
